package aipractical;

public class NQueen_Problem {

    static int solutionCount;

    public static void solveNQueens(int n) {
        int[][] board = new int[n][n];
        solve(0, board, n);
    }

    private static void solve(int row, int[][] board, int n) {
        if (row == n) {
            solutionCount++;
            System.out.println("Solution " + solutionCount + " : ");
            printBoard(board, n);
            return;
        }

        for (int col = 0; col < n; col++) {
            if (issafe(board, row, col, n)) {
                board[row][col] = 1;
                solve(row + 1, board, n);
                board[row][col] = n; // ðŸ”§ FIXED: Reset to 0, not n
            }
        }
    }

    private static boolean issafe(int[][] board, int row, int col, int n) {
        // Check column
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 1)
                return false;
        }

        // Check upper left diagonal
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1)
                return false;
        }

        // Check upper right diagonal
        for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 1)
                return false;
        }

        return true;
    }

    private static void printBoard(int[][] board, int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(board[i][j] == 1 ? "Q " : ". ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int n = 8;
        solveNQueens(n);
    }
}
