package aipractical;

import java.util.LinkedList;
import java.util.Queue;

public class DFS_BFS {
	
	int vertices;
	int adjMatrix[][];

	public DFS_BFS(int vertices, int[][] adjMatrix) {
		super();
		this.vertices = vertices;
		this.adjMatrix = adjMatrix;
	}
	
	public void addEdge(int u , int v) {
		adjMatrix[u][v]=1;
		adjMatrix[v][u]=1;
	}
	
	public void printMatrix()
	{
		for(int i=0;i<vertices;i++) {
			for(int j=0;j<vertices;j++) {
				System.out.print(adjMatrix[i][j]);
			}
			System.out.println();
		}
	}
	
//	DFS
	public void DFS(int start) {
		boolean visited[]=new boolean[vertices];
		DFSRecursive(start,visited);
	}

	private void DFSRecursive(int v, boolean[] visited) {
		visited[v]=true;
		System.out.print(v+"  ");
		for(int i=0;i<vertices;i++) 
		{
			if(adjMatrix[v][i]==1 && !visited[i]) 
			{
				DFSRecursive(i, visited);
			}
		}
	
}
	
//	BFS
	public void BFS(int start) {
		boolean[] visited = new boolean[vertices];
			Queue<Integer>level = new LinkedList<>();
			level.add(start);
			BFSRecursive(start,visited,level);
	}

	private void BFSRecursive(int v, boolean[] visited, Queue<Integer> level) 
	{
		if(level.isEmpty())return;
//		for 1st node
		v=level.remove();
		visited[v]=true;
		System.out.print(v+ "  ");
//		another nodes
		Queue<Integer>nextlevel = new LinkedList<>();
		for(int i=0;i<vertices;i++) {
			
			if(adjMatrix[v][i]==1 && !visited[i]) {
				nextlevel.add(i);
			}
		}
		level.addAll(nextlevel);
		BFSRecursive(v,visited,level);
	}

	public static void main(String[] args) {
		int v=5;
		int[][] adjMatrix = new int[v][v];
		DFS_BFS g =new DFS_BFS(v, adjMatrix);
		g.addEdge(0, 1);
		g.addEdge(0, 2);
		g.addEdge(1, 3);
		g.addEdge(1, 4);
		g.printMatrix();
		System.out.println("DFS Order is:");
		g.DFS(0);
		System.out.println();
		System.out.println("BFS Order is: ");
		g.BFS(0);
	}

}
